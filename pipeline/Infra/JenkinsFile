@Library('Jenkins_Shared_Library') _
import static groovy.json.JsonOutput.*

pipeline {

  agent any

  options {
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  stages {

    stage('Checkout') {
      steps {
        // clone your project from Git/SVN etc
        echo 'Cloning project from Git/SVN etc .. '
        sh 'git --version'
        git branch: 'master', url: 'https://github.com/nalubotula/openflightsdatasurge.git'
        sh "ls -lat"
        checkout([
            $class: 'GitSCM', 
            branches: [[name: '*/master']], 
            doGenerateSubmoduleConfigurations: false, 
            extensions: [[$class: 'CleanCheckout']], 
            submoduleCfg: [], 
            userRemoteConfigs: [[credentialsId: 'OPENFLIGHT-CREDS', url: 'https://github.com/nalubotula/openflightsdatasurge.git']]
        ])
      }
    }

      stage('Infrastructure De-commissioning ') {
      steps {
        // De-Commissioning Code will go here
        echo 'De-Commissioning .. '
      }
      }

     stage('Infrastructure commissioning (AKS Cluster on Azure)') {
      steps {
        // Clean the workspace
        echo 'Commissioning (AKS Cluster on Azure) .. '
        
        sh 'terraform --version'
        sh  """ 
            cd flightservice/terraform-aks-k8s
            sudo terraform init -backend-config="storage_account_name=sredevops" -backend-config="container_name=tfstate" -backend-config="access_key=HaGZTNOlXWKLSIFduNif3+F8dzgDqMm4Be0zHk337ac3mGVaZGO2Rw5OZQdOAehhYGj67qgkg7HEIwUQMTa1BQ==" -backend-config="key=codelab.microsoft.tfstate"
            """
        
 //       sh 'cd flightservice/terraform-aks-k8s'
 //       sh 'pwd'
//        sh 'terraform init -backend-config="storage_account_name=sredevops" -backend-config="container_name=tfstate" -backend-config="access_key=HaGZTNOlXWKLSIFduNif3+F8dzgDqMm4Be0zHk337ac3mGVaZGO2Rw5OZQdOAehhYGj67qgkg7HEIwUQMTa1BQ==" -backend-config="key=codelab.microsoft.tfstate"'
//        sh '/flightservice/terraform-aks-k8s/terraform plan -out out.plan'
 //       sh 'terraform apply /flightservice/terraform-aks-k8s/out.plan'
 //       sh 'echo "$(terraform output kube_config)" > ./azurek8s'
 //       sh 'export KUBECONFIG=./azurek8s'
 //       sh 'kubectl get nodes'
      }
    }

    }

  post {
    success {
      echo "SUCCESS"
    }
    failure {
      echo "FAILURE"
    }
    changed {
      echo "Status Changed: [From: $currentBuild.previousBuild.result, To: $currentBuild.result]"
    }
    always {
      script {
        def result = currentBuild.result
        if (result == null) {
          result = "SUCCESS"
        }
      }
    }
  }
}