@Library('Jenkins_Shared_Library') _
import static groovy.json.JsonOutput.*

pipeline {

  agent any

  options {
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  stages {

    stage('Checkout') {
      steps {
          // clone your project from Git/SVN etc
          echo 'Cloning project from Git/SVN etc .. '
          sh 'git --version'
          git branch: 'master', url: 'https://github.com/nalubotula/openflightsdatasurge.git'
          sh "ls -lat"
        checkout([
            $class: 'GitSCM', 
            branches: [[name: '*/master']], 
            doGenerateSubmoduleConfigurations: false, 
            extensions: [[$class: 'CleanCheckout']], 
            submoduleCfg: [], 
            userRemoteConfigs: [[credentialsId: 'OPENFLIGHT-CREDS', url: 'https://github.com/nalubotula/openflightsdatasurge.git']]
        ])
        
      }
    }

    stage('Build Docker Image') {
      steps {
        // build, build stages can be made in parallel aswell
        // build stage can call other stages
        // can trigger other jenkins pipelines and copy artifact from that pipeline

        echo 'Build Docker Image from the Docker file .. '
       
        sh 'pwd'
     //   sh 'python3.6 flightservice/app.py'
        sh 'docker --version'
    //    sh 'sudo docker build -t python-app flightservice/.'

      }
    }

    stage('Test') {
      steps {
        // Test (Unit test / Automation test(Selenium/Robot framework) / etc.)
        echo 'Unit test / Automation test(Selenium/Robot framework) / etc .. '
      }
    }

    stage('Code Analysis') {
      steps {
        // Static Code analysis (Coverity/ SonarQube /openvas/Nessus etc.)
        echo 'Static Code analysis (Coverity/ SonarQube /openvas/Nessus etc.) .. '
      }
    }

    stage('Generate Release Notes') {
      steps {
        // Release note generation .
        echo 'Release note generation .. '
      }
    }

    stage('Tagging') {
      steps {
        // Tagging specific version number
        echo 'Tagging specific version number .. '
      }
    }

    stage('Release') {
      steps {
        // release specific versions(Snapshot / release / etc.)
        echo 'Release .. '
      }
    }

    stage('Deploy') {
      steps {
        // Deploy to cloud providers /local drives /artifactory etc.
        // Deploy to Deploy/prod /test/ etc
        echo 'Deploy to Deploy/prod /test/ etc .. '
      }
    }
  }

  post {
    success {
      echo "SUCCESS"
    }
    failure {
      echo "FAILURE"
    }
    changed {
      echo "Status Changed: [From: $currentBuild.previousBuild.result, To: $currentBuild.result]"
    }
    always {
      script {
        def result = currentBuild.result
        if (result == null) {
          result = "SUCCESS"
        }
      }
    }
  }
}